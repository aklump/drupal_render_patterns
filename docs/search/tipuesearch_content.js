var tipuesearch = {"pages":[{"title":"Changelog","text":"  7.x-1.1-rc5   BREAKING CHANGE: defaults() should now be a public static function.  ","tags":"","url":"CHANGELOG.html"},{"title":"Drupal Module: Render Patterns","text":"  Author: Aaron Klump  &#x73;&#111;&#117;&#x72;&#x63;&#101;c&#x6f;&#100;&#101;&#x40;&#x69;&#110;&#116;&#x68;&#x65;&#108;&#x6f;&#x66;&#116;&#115;&#x74;&#x75;&#100;i&#x6f;&#115;&#46;&#x63;&#x6f;&#109;  Summary  The Render Patterns module allows you to encapsulate Drupal render arrays as class objects, for repetitive use.  You expose only the dynamic elements of your render array as class properties, and the rest of the render array is hidden within the black box of the render pattern class.  This type of design makes sense if you need to reference the same render array in more than one place as it avoids errors caused by code duplication.  It comes from the DRY principle.  You may also visit the project page on Drupal.org.  Requirements   A very basic understanding of php objects is needed to produce the code used by this module.  Most Drupal site builders will already be familiar with this.   Installation   Install as usual, see http:\/\/drupal.org\/node\/70151 for further information.   Configuration  There is nothing to configure aside from creating your classes as shown below.  Advanced help will reveal more documentation if you enable it.  Suggested Use  This probably should not be used as a one-to-one replacement for a render array based on a single theme function as this just adds a layer of abstraction and complexity.  It would be more straitforward to just create a render array directly.  And if you are not repeating the render array, you should also consider just creating the render array directly.  However, where this module really takes over is when you have a pattern that combines multiple render arrays and is repeated.  The following example tries to unveil why this module can be so helpful.  One solution would be to create functions that take arguments and return render arrays, but I think this approach is cleaner and easier to maintain.  How you implement  &lt;?php $obj = render_patterns_get(\"ListOfThumbs\"); $obj-&gt;images = array(   'public:\/\/sun.jpg',   'public:\/\/moon.jpg',   'public:\/\/stars.jpg', ); $render = $obj-&gt;build();   What you get in $render  Array (     [#theme] =&gt; item_list     [#type] =&gt; ul     [#items] =&gt; Array         (             [0] =&gt; &lt;img src=\"http:\/\/localhost\/sites\/default\/files\/styles\/thumb\/public\/sun.jpg\" alt=\"\" \/&gt;             [1] =&gt; &lt;img src=\"http:\/\/localhost\/sites\/default\/files\/styles\/thumb\/public\/moon.jpg\" alt=\"\" \/&gt;             [2] =&gt; &lt;img src=\"http:\/\/localhost\/sites\/default\/files\/styles\/thumb\/public\/stars.jpg\" alt=\"\" \/&gt;         )      [#attributes] =&gt; Array         (             [class] =&gt; list-of-thumbs         )  )   What you had to do to get there   Enable this module. Create a render pattern by creating a file called THEME\/render_patterns\/ListOfThumbsRenderPattern.php the contents of which are:  &lt;?php \/**  * @file  * Generates a render pattern called ListOfThumbsRenderPattern  *\/  \/**  * Represents a ListOfThumbsRenderPattern object class.  *   * @brief Renders images in a thumbnail image style as a list.  *\/ class ListOfThumbsRenderPattern extends RenderPatternsPattern {    public static function defaults() {     return array(       'images' =&gt; array(),       'style' =&gt; 'thumb',     );   }    public function build() {     $items = array();     foreach ($this-&gt;images as $uri) {       $items[] = array(         '#theme' =&gt; 'image_style',         '#style_name' =&gt; 'thumb',         '#path' =&gt; $uri,       );     }     foreach ($items as &amp;$item) {       $item = drupal_render($item);     }     $build = array(       '#theme' =&gt; 'item_list',       '#type' =&gt; 'ul',       '#items' =&gt; $items,       '#attributes' =&gt; array(         'class' =&gt; 'list-of-thumbs',       ),     );      return $build;   } }    One more point render().  Notice that you can go directly to the rendered version by using the render() method. This is what you might want to do inside of a *.tpl.php file, where you actually need a string as the return value.  The following could show the contents of list-of-thumbs.tpl.php.  &lt;?php $obj = render_patterns_get(\"ListOfThumbs\"); $obj-&gt;images = array(   'public:\/\/sun.jpg',   'public:\/\/moon.jpg',   'public:\/\/stars.jpg', ); print $obj-&gt;render();   For clarity the above is equivalent to doing the following:  &lt;?php $obj = render_patterns_get(\"ListOfThumbs\"); $obj-&gt;images = array(   'public:\/\/sun.jpg',   'public:\/\/moon.jpg',   'public:\/\/stars.jpg', ); print drupal_render($obj-&gt;build());   Design Decisions\/Rationale  With heavy use of render arrays in writing complex themes, I found that I was repeating the same render array configurations throughtout several locations: preprocessors, tpls, and display suite layouts.  This became a headache to keep in sync if such a pattern changed.  I thought, I need something like a theme declaration that returns a renderable array not a string.  This module is my answer implementing a write once, use often approach for these \"render patterns\".  Contact   In the Loft Studios Aaron Klump - Developer PO Box 29294 Bellingham, WA 98228-1294 skype: intheloftstudios d.o: aklump http:\/\/www.InTheLoftStudios.com  ","tags":"","url":"README.html"},{"title":"Using arrays when implementing a pattern","text":"  Because of the internals of the RenderPatternsPattern class, and how the defaults are handled using magic settings\/getters, you cannot push array elements onto array based keys as you might imagine.  The example below shows what this means and offers two solutions.  The problem: This will not work  $obj = render_patterns_get(\"ListOfThumbs\"); $obj-&gt;images[] = 'public:\/\/do.jpg'; $obj-&gt;images[] = 'public:\/\/re.jpg';   Solution 1  $obj = render_patterns_get(\"ListOfThumbs\"); $obj-&gt;images = array(   'public:\/\/do.jpg',   'public:\/\/re.jpg', );   Solution 2  $obj = render_patterns_get(\"ListOfThumbs\"); $images = array(); $images[] = 'public:\/\/do.jpg'; $images[] = 'public:\/\/re.jpg'; $obj-&gt;images = $images;  ","tags":"","url":"arrays.html"},{"title":"Defaults","text":"  If you need dynamic values based on other values, you SHOULD implement a hook method as illustrated here.  This function will fire when we try to get the value of $this-&gt;hasFavorites.  protected function get__hasFavorites($value, $default, $exists) {     return boolval($exists ? $value : !empty($this-&gt;items)); }   Notice the method receives three arguments:   The current value The value as set up in defaults(). If the default has been overridden (a value has been assigned).  ","tags":"","url":"defaults.html"},{"title":"Display Suite Integration","text":"  If you model your render pattern after a display suite layout and then implement the pattern in the layout tpl as seen below, you have the ultimate flexibility as you can programatically use the display suite layout very easily.  This example implements the display suite layout in the theme and we use these files for the complete solution.  THEME\/ds_layouts\/example\/ THEME\/ds_layouts\/example\/example.inc THEME\/ds_layouts\/example\/example.tpl.php THEME\/render_patterns\/ THEME\/render_patterns\/ExampleBasedOnDsLayoutRenderPattern.php   example.inc  &lt;?php function ds_example() {   return array(     'label' =&gt; t('Example'),     'regions' =&gt; array(       'content' =&gt; t('Content'),       'footer' =&gt; t('Footer'),     ),   ); }   example.tpl.inc  &lt;?php \/**  * @file  * Template for the example Display Suite layout.  *  * Variables:  * - rendered_by_ds bool  * - layout_attributes string  * - layout_wrapper string  * - content renderable  * - content_classes string  * - content_wrapper string  * - footer renderable  * - footer_classes string  * - footer_wrapper string  *\/ $pattern = render_patterns_get('ExampleBasedOnDsLayout'); $pattern-&gt;tag = 'div';  \/\/ Now inject the variables from display suite. $pattern-&gt;content         = $content; $pattern-&gt;content_classes = $content_classes; $pattern-&gt;content_wrapper = $content_wrapper; $pattern-&gt;footer         = $footer; $pattern-&gt;footer_classes = $footer_classes; $pattern-&gt;footer_wrapper = $footer_wrapper;  print $hp-&gt;render();   ExampleBasedOnDsLayoutRenderPattern.php  &lt;?php \/**  * @file  * Generates a render pattern called ExampleBasedOnDsLayoutRenderPattern  *\/  \/**  * Represents a ExampleBasedOnDsLayoutRenderPattern object class.  *   * @brief Shows how to integrate with display suite; notice that we are  * extending a different class, that is RenderPatternsDSPattern and not just  * RenderPatternsPattern.  *  * @see ds_example().  *\/ class ExampleBasedOnDsLayoutRenderPattern extends RenderPatternsDSPattern {    \/\/ Instead of implementing the defaults() method we merely map this to the   \/\/ ds_layout and let that module provide the defaults for us.  If you need   \/\/ to provide additional defaults beyond the ds layout, then do like has   \/\/ be done here with the defaults method(), calling parent::defaults().   protected $ds_layout = 'example';    \/\/ parent::defaults() insures that all keys from the layout are set so   \/\/ you must do the following when setting non-layout defaults.   public function defaults() {     return array(       'tag' =&gt; 'h2',     ) + parent::defaults();   }    \/\/ The build method is the same.   public function build() {     $build[] = array(       '#theme' =&gt; 'html_tag',        '#tag' =&gt; $this-&gt;tag,        '#value' =&gt; t('Content'),     );     $build[] = array(       '#theme' =&gt; 'region',       '#value' =&gt; drupal_render($this-&gt;content),     );     $build[] = array(       '#theme' =&gt; 'html_tag',        '#tag' =&gt; $this-&gt;tag,        '#value' =&gt; t('Footer'),     );     $build[] = array(       '#theme' =&gt; 'region',       '#value' =&gt; drupal_render($this-&gt;footer),     );      return $build;     } }  ","tags":"","url":"display_suite.html"},{"title":"Search Results","text":" ","tags":"","url":"search--results.html"}]};
