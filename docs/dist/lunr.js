var lunrIndex = [{"id":"changelog","title":"Changelog","body":"All notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https:\/\/keepachangelog.com\/en\/1.0.0\/),\nand this project adheres to [Semantic Versioning](https:\/\/semver.org\/spec\/v2.0.0.html).\n\n## [Unreleased]\n- lorem\n\n## [4.0.0] - 2021-10-04\n\n### Added\n- Standard namespaces so core auto-loading is used.\n\n### Changed\n- Pattern classes should now be namespaced to their extension, like other classes.  For example of your theme `foo_theme` is providing classes they should be namespaced to `Drupal\\foo_theme\\RenderPatterns\\`.  They should be saved to _foo_theme\/src\/RenderPatterns\/_.  The same is true for modules that provide render pattern(s).\n\n### Removed\n- `render_patterns_get`\n- `hook_render_patterns_info`\n- `hook_render_patterns_info_alter`\n- `\\Drupal\\render_patterns\\Uncacheable`\n\n## [8.x-3.0] - 2021-03-29\n\n### Added\n\n- Pattern classes should be declared `final`.\n- The `::get()` method to replace `render_patterns_get()`.\n- Invalidate `\\Drupal::cache('bootstrap')->get('render_patterns_list')` when\n  default theme changes.\n- Composer-based dependencies. See _README.md_ for adding to your app-level _composer.json_ for dependencies.\n\n### Changed\n\n- It is no longer necessary to call `parent::__construct()` when\n  using `\\Drupal\\Core\\DependencyInjection\\ContainerInjectionInterface` in your\n  patterns.\n- Testing a pattern property with isset() will now return FALSE if the\n  overridden value is NULL.\n- Moved default theme render patterns directory from _{theme}\/render_patterns_ to _{theme}\/src\/render_patterns\/_\n\n### Removed\n\n- `::cl()` has been removed. Try `\\Drupal\\front_end_components\\BemTrait`\n  instead.\n- `::ajaxWrap()`\n- `::getForm()`\n- `::defaults()`\n- `::render()` has been remove. Use the render service after `::build()`.\n\n### Deprecated\n\n- `$this->properties`. You should migrate to `::getProperties()`.\n- `render_patterns_get()`. You should call `::get` on the pattern class itself.\n\n## [8.x-2.1] - 2021-03-26\n\n### Added\n\n- Support for validation of objects by FQN. See docs for usage example.\n\n## [8.x-2.0] - 2020-02-14\n\n### Changed\n\n- Switched to semantic versioning.\n\n### Removed\n\n- Dependency on [drupal:data_api](https:\/\/www.drupal.org\/project\/data_api). See\n  documentation _update-v2.md_ on how to handle this breaking change.\n\n## 8.x-1.1-rc1 2019-03-15T16:16, aklump\n\n* You must declare all properties as protected or in the schema.\n* Change all your patterns to extend `\\Drupal\\my_theme\\RenderPatterns\\` instead\n  of `RenderPatternsPattern`.\n* You must add the PHP 7 typehints for: `build` and `render`\n  per `\\Drupal\\my_theme\\RenderPatterns\\Interface`.\n* It is no longer recommended to suffix your classes with `RenderPattern`.\n* You may now pass an array of values as the second argument\n  to `render_patterns_get` to set those properties on instantiation.\n* `public static defaults()` has been deprecated. You should migrate\n  to `class::$properties`.\n* Added JSONSchema validation via `Pattern::$properties`. Use it to define the\n  property schema\n  per [JSON Schema format](https:\/\/json-schema.org\/latest\/json-schema-validation.html)\n  for automatic validation.\n\n## 7.x-1.1-rc5\n\n* BREAKING CHANGE: `defaults()` should now be a `public static` function."},{"id":"readme","title":"Drupal Module: Render Patterns","body":"**Author:** Aaron Klump\n\n## Summary\n\nThe _Render Patterns_ module allows you to encapsulate Drupal render arrays as PHP classes, for repeat use. You expose only the dynamic elements of your render array as class properties, and the rest of the render array is hidden within the black box of the render pattern class. This type of design makes sense if you need to reference the same render array in more than one place as it avoids errors caused by code duplication. It comes from the [DRY principle](https:\/\/en.wikipedia.org\/wiki\/Don%27t_repeat_yourself).\n\nYou may also visit the [project page](http:\/\/www.drupal.org\/project\/render_patterns) on Drupal.org.\n\n## Install with Composer1. Because this is an unpublished package, you must define it's repository in\n   your project's _composer.json_ file. Add the following to _composer.json_ in\n   the `repositories` array:\n\n    ```json\n    {\n        \"type\": \"github\",\n        \"url\": \"https:\/\/github.com\/aklump\/drupal_render_patterns\"\n    }\n    ```\n1. Require this package:\n\n    ```\n    composer require aklump_drupal\/render_patterns:^4.2\n    ```\n1. Add the installed directory to _.gitignore_\n\n   ```php\n   \/web\/modules\/custom\/render_patterns\/\n   ```\n\n4. Enable this module.\n5. Begin creating one or more render patterns in _{active theme}\/src\/RenderPatterns\/_.  (You may also provide classes in a module by adjusting the namespace to the module.)\n6. Use namespace `\\Drupal\\my_theme\\src\\RenderPatterns` for the classes.\n\n## Usage\n\nThe \"render pattern\" is meant to encapsulate common render array situations. The\npattern is a class with a `build()` method. As shown immediately below, nothing\nchanges across implementations. This may not always be practical, so...\n\n```php\nnamespace Drupal\\my_theme\\RenderPatterns;\n\nfinal MyReuseablePattern extends \\Drupal\\render_patterns\\Pattern {\n\n  public function build(): array {\n    return ['#markup' => 'I am reusable text.'];\n  }\n\n  ...\n\n}\n```\n\n...the interface defines the `getProperties` method, which exposes any number of\nconfigurable properties that will influence the build. This method returns an\narray of _property names_, each defining itself with the following\nkeys: `type, default, alter`.\n\n```php\nprotected function getProperties(): array {\n  return [\n    'account' => [\n\n      \/\/ This must be an instance of this class.\n      'type' => \\Drupal\\Core\\Session\\AccountInterface::class,\n\n      \/\/ If the value is NULL, ::default() will be called.  This will only be\n      \/\/ called if the value is NULL, so generally speaking this is called\n      \/\/ once.  Note that any callable can be used so you do NOT need to use\n      \/\/ an anonymous function here, but instead could reference a method on\n      \/\/ this class or elsewhere; and the callback receives the property name\n      \/\/ as the argument.\n      'default' => function () {\n        return $this->currentUser;\n      },\n\n      \/\/ This optional key can be used to modify the value before it's returned\n      \/\/ by the magic getter.  This is always called, each time the code calls\n      \/\/ $this->account.\n      'alter' => function ($value, $default, $is_overridden) {\n        \/\/ TODO You may do something here to alter the property value.\n      },\n    ],\n\n    \/\/ In this example you see that two types entities are allowed.\n    'entity' => [\n      'type' => [\n        \\Drupal\\node\\NodeInterface::class,\n        \\Drupal\\user\\UserInterface::class,\n      ],\n    ],\n\n    \/\/ And then here we have some basic types.\n    'collectionId' => [\n\n      \/\/ Both integers and nulls can be set on this key.\n      'type' => ['integer', 'null'],\n      'default' => 10,\n    ],\n\n    \/\/ Just a simple array.\n    'ajaxContext' => ['type' => 'array'],\n  ];\n}\n```\n\n### Building The Render Array\n\nMost often you will follow this simple pattern:\n\n```php\n$renderable_array = \\Drupal\\my_theme\\RenderPatterns\\MyReuseablePattern::get([\n  'entity' => $account,\n  'ajaxContext' => ['foo' => 'bar'],\n])->build();\n$html = \\Drupal::service('renderer')->render($renderable_array);\n```\n\n### Instance Property Modification\n\nFor more complete situations you have the ability to modify properties on an\ninstance if you do something like this:\n\n```php\n$pattern = \\Drupal\\my_theme\\RenderPatterns\\MyReuseablePattern::get([\n  'entity' => $account,\n  'ajaxContext' => ['foo' => 'bar'],\n]);\n\n$pattern->entity = $node;\n\n$renderable_array = $pattern->build();\n...\n```\n\n### Property Validation\n\nProperty values will be validated against the schema defined\nby `getProperties()` and `\\Drupal\\my_theme\\RenderPatterns\\Exception` will be\nthrown if the value falls outside of the allowed `type`. Validation\nuses [JSON Schema](https:\/\/json-schema.org\/latest\/json-schema-validation.html),\nwhich receives a schema built from `getProperties()` with a few, minor\nmodifications for compatibility with Drupal."},{"id":"arrays","title":"Problems With Array Overloading","body":"Because of the internals of the `RenderPatternsPattern` class, and how the defaults are handled using magic settings\/getters, you cannot push array elements onto array based keys as you might imagine.  The example below shows what this means and offers two solutions.\n\n## The problem: This will not work\n\n    $obj = \\Drupal\\my_theme\\RenderPatterns\\ListOfThumbs::get();\n    $obj->images[] = 'public:\/\/do.jpg';\n    $obj->images[] = 'public:\/\/re.jpg';\n\n## Solution 1\n\n    $obj = \\Drupal\\my_theme\\RenderPatterns\\ListOfThumbs::get();\n    $obj->images = [\n      'public:\/\/do.jpg',\n      'public:\/\/re.jpg',\n    ];\n\n## Solution 2\n\n    $obj = \\Drupal\\my_theme\\RenderPatterns\\ListOfThumbs::get();\n    $images = [];\n    $images[] = 'public:\/\/do.jpg';\n    $images[] = 'public:\/\/re.jpg';\n    $obj->images = $images;"},{"id":"services","title":"Using Services (Dependency Injection)","body":"This example shows you how to use services in your pattern.\n\n1. Implement `\\Drupal\\Core\\DependencyInjection\\ContainerInjectionInterface`\n1. Declare `private` class variables.\n\n```php\nnamespace Drupal\\my_theme\\RenderPatterns\\;\n\nfinal class LibraryFacets extends Pattern implements \\Drupal\\Core\\DependencyInjection\\ContainerInjectionInterface {\n\n  private $blockRepository;\n\n  private $entityTypeManager;\n\n  public function __construct(\\Drupal\\block\\BlockRepositoryInterface $block_repository, \\Drupal\\Core\\Entity\\EntityTypeManagerInterface $entity_type_manager) {\n    $this->blockRepository = $block_repository;\n    $this->entityTypeManager = $entity_type_manager;\n  }\n\n  public static function create(\\Symfony\\Component\\DependencyInjection\\ContainerInterface $container) {\n    return new static(\n      $container->get('block.repository'),\n      $container->get('entity_type.manager'),\n    );\n  }\n\n  ...\n}\n\n```"}]