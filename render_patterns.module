<?php

/**
 * @file
 * Base file for the render_patterns module.
 *
 */

use Drupal\Core\Render\Markup;
use Drupal\render_patterns\MissingPatternException;
use Drupal\render_patterns\PatternException;
use Drupal\render_patterns\PatternInterface;

/**
 * Factory function to generate a new pattern instance.
 *
 * @param string $pattern_name
 *   The name of the pattern.
 * @param array $preset_values
 *   An array of property/values to set on the new pattern.
 *
 * @return \Drupal\render_patterns\PatternInterface
 *   The pattern instance.
 *
 * @see \Drupal\render_patterns\Pattern::get
 *
 * @deprecated Use the ::get() method on the render pattern class.
 */
function render_patterns_get(string $pattern_name, array $preset_values = []): PatternInterface {
  try {
    $candidates = array_map(function ($name) {
      return 'Drupal\\render_patterns\\Pattern\\' . $name;
    }, array_unique([
      $pattern_name . 'RenderPattern',
      $pattern_name,
    ]));

    foreach ($candidates as $class_name) {
      if (class_exists($class_name)) {
        return $class_name::get($preset_values);
      }
    }

    throw new MissingPatternException($candidates);
  }
  catch (\Exception $exception) {
    $message = $exception->getMessage();
    if (!$exception instanceof PatternException) {
      $message = t('%name: @message', [
        '%name' => $pattern_name,
        '@message' => $message,
      ])->__toString();
    }
    \Drupal::messenger()->addError(Markup::create($message));
    throw new \RuntimeException($message, $exception->getCode(), $exception);
  }
}

/**
 * Implements hook_render_patterns_info().
 *
 * Automatically register the default theme as providing render patterns based
 * on the existence of the directory.
 */
function render_patterns_render_patterns_info() {
  $config = \Drupal::service('config.factory')->get('system.theme');
  if (($theme_folder = \Drupal::root() . '/' . drupal_get_path('theme', $config->get('default')) . '/src/render_patterns')
    && is_dir($theme_folder)) {
    return [
      'directory' => $theme_folder,
      // Give the theme the higher weight so it can override.
      'weight' => 10,
    ];
  }

  return [];
}
