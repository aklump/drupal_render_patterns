<?php
/**
 * @file
 * Base file for the render_patterns module.
 */

/**
 * Factory function to generate a new pattern instance.
 *
 * @param string $pattern_name
 *   The name of the pattern.
 * @param array $preset_values
 *   An array of property/values to set on the new pattern.
 *
 * @return \Drupal\render_patterns\PatternInterface
 *   The pattern instance.
 *
 * @see \Drupal\render_patterns\PatternFactory::get
 */
function render_patterns_get($pattern_name, array $preset_values = []) {
  try {
    $candidates = array_unique([
      $pattern_name . 'RenderPattern',
      $pattern_name,
    ]);

    foreach ($candidates as $class_name) {
      if (class_exists($class_name)) {
        $pattern = $class_name::create(\Drupal::getContainer());
        if ($preset_values) {
          foreach ($preset_values as $key => $value) {
            $pattern->{$key} = $value;
          }
        }

        return $pattern;
      }
    }

    throw new MissingPatternException($candidates);

  }
  catch (\Exception $exception) {
    $message = $exception->getMessage();
    if (!$exception instanceof RenderPatternsPatternException) {
      $message = t('%name: @message', [
        '%name' => $pattern_name,
        '@message' => $message,
      ]);
    }
    drupal_set_message($message, 'error');
    $pattern = new RenderPatternsMessage(data_api());
    $pattern->message = $message;

    return $pattern;
  }
}

/**
 * Implements hook_render_patterns_info().
 *
 * Register the default theme for pattern use.
 */
function render_patterns_render_patterns_info() {
  return array(
    'directory' => drupal_get_path('theme', variable_get('theme_default', '')) . '/render_patterns',
    // Give the theme the higher weight so it can override.
    'weight' => 10,
  );
}

/**
 * Implements hook_registry_files_alter().
 *
 * Adds all discovered patterns to the registry
 */
function render_patterns_registry_files_alter(&$files, $modules) {

  // Search the filesystem for directories.
  $list = array();
  foreach (module_implements('render_patterns_info') as $module) {
    $weight = 0;
    $info = module_invoke($module, 'render_patterns_info');
    if (!isset($info['weight'])) {
      // Use this modules weight
      foreach ($modules as $module) {
        if ($module->name === 'render_patterns') {
          $weight = $module->weight;
          break;
        }
      }
    }
    $list[$module] = $info + array('weight' => $weight);
  }
  drupal_alter('render_patterns_info', $list);
  foreach ($list as $item) {
    $path = $item['directory'];
    $scan = file_scan_directory($path, '/.*\.php$/', array('recurse' => FALSE));
    $scan = array_fill_keys(array_keys($scan), array(
      'module' => 'render_patterns',
      'weight' => $item['weight'],

    ));
    $files += $scan;
  }
}

